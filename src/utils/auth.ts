/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Telegram WebApp
 */

import { getApiEndpoint } from './config';

export interface AuthTokenData {
  token: string;
  userId: string;
  telegramId: number;
  expires: number;
}

// ‚úÖ TEMP_FALLBACK_TOKEN –£–î–ê–õ–ï–ù!
// Backend /api/auth/telegram —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
// –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç–æ–∫–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram WebApp initData

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp
 */
export const getAuthToken = async (): Promise<string | null> => {
  try {
    console.log('üîê getAuthToken called');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ localStorage
    let token = localStorage.getItem('authToken');
    console.log('üì¶ Token from localStorage:', token ? `${token.substring(0, 20)}...` : 'NULL');
    
    if (!token) {
      console.log('üîç No token in localStorage, checking Telegram WebApp...');
      
      // ‚úÖ FIX: –î–æ–±–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
      let initData: string | null = null;
      const maxRetries = 3;
      
      for (let attempt = 0; attempt < maxRetries; attempt++) {
        console.log(`üîÑ Attempt ${attempt + 1}/${maxRetries} to get Telegram initData`);
        console.log('Window available:', typeof window !== 'undefined');
        console.log('Telegram object:', !!(window as any).Telegram);
        console.log('Telegram.WebApp:', !!(window as any).Telegram?.WebApp);
        console.log('Telegram.WebApp.initData:', !!(window as any).Telegram?.WebApp?.initData);
        
        if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initData) {
          initData = (window as any).Telegram.WebApp.initData;
          console.log('‚úÖ initData found on attempt', attempt + 1);
          break;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º 200ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π
        if (attempt < maxRetries - 1) {
          console.log('‚è≥ Waiting 200ms before retry...');
          await new Promise(resolve => setTimeout(resolve, 200));
        }
      }
      
      if (typeof window !== 'undefined' && initData) {
        console.log('‚úÖ initData available:', initData ? `${initData.substring(0, 50)}...` : 'EMPTY');
        
        const endpoint = getApiEndpoint('/auth/telegram');
        console.log('üåê Requesting token from:', endpoint);
        
        try {
          // –î–æ–±–∞–≤–ª—è–µ–º timeout 60 —Å–µ–∫—É–Ω–¥ (–¥–ª—è cold start –Ω–∞ Render)
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 20000); // ‚ö° –£–ú–ï–ù–¨–®–ï–ù–û –¥–æ 20 —Å–µ–∫
          
          console.log('‚è±Ô∏è Timeout set: 20 seconds (waiting for backend cold start)');
          
          const authResponse = await fetch(endpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ initData }),
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          const responseTime = Date.now();
          console.log('üì° Auth response status:', authResponse.status);
          console.log('‚è±Ô∏è Response time: ~' + Math.round((responseTime - Date.now()) / 1000) + 's (should be fast)');
          
          if (authResponse.ok) {
            const authData = await authResponse.json();
            console.log('‚úÖ Auth successful, token received');
            token = authData.token;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
            localStorage.setItem('authToken', token);
            if (authData.expires) {
              localStorage.setItem('tokenExpires', authData.expires.toString());
            }
            console.log('üíæ Token saved to localStorage');
          } else {
            const errorText = await authResponse.text();
            console.error('‚ùå Auth response failed:', authResponse.status, authResponse.statusText);
            console.error('Error body:', errorText);
            console.error('üö® Cannot authenticate - backend returned error');
            return null;
          }
        } catch (error) {
          console.error('‚ùå Auth request failed:', error);
          
          if (error instanceof Error) {
            if (error.name === 'AbortError') {
              console.error('‚è±Ô∏è TIMEOUT after 20 seconds - backend is not responding!');
              console.error('üö® This indicates a serious backend problem:');
              console.error('   1. Backend is sleeping (cold start)');
              console.error('   2. MongoDB connection timeout');
              console.error('   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MONGODB_URI –Ω–∞ Render');
              console.error('üìã CHECK BACKEND LOGS ON RENDER!');
              
              // ‚úÖ FIX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              if (typeof window !== 'undefined') {
                alert('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
              }
            } else {
              console.error('üåê Network error:', error.message);
            }
          }
          
          console.error('üö® Cannot authenticate - no fallback available');
          return null;
        }
      } else {
        console.error('‚ùå Telegram WebApp not available or no initData');
        console.error('üö® Cannot authenticate without Telegram WebApp');
        return null;
      }
    } else {
      console.log('‚úÖ Using existing token from localStorage');
    }
    
    return token;
  } catch (error) {
    console.error('‚ùå Error getting auth token:', error);
    return null;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
 */
export const isTokenValid = (): boolean => {
  try {
    const token = localStorage.getItem('authToken');
    const expires = localStorage.getItem('tokenExpires');
    
    if (!token || !expires) return false;
    
    const now = Date.now();
    return now < parseInt(expires);
  } catch (error) {
    console.error('Error checking token validity:', error);
    return false;
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
 */
export const clearAuthTokens = (): void => {
  localStorage.removeItem('authToken');
  localStorage.removeItem('tokenExpires');
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 */
export const getValidAuthToken = async (): Promise<string | null> => {
  console.log('üîë getValidAuthToken called');
  
  const tokenValid = isTokenValid();
  console.log('Token valid:', tokenValid);
  
  if (!tokenValid) {
    console.log('Token invalid or missing, clearing old tokens...');
    clearAuthTokens();
  }
  
  return await getAuthToken();
};
